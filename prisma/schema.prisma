// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// MODEL DEFINITIONS

model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  personIDs String[] @db.ObjectId

  Persons Person[] @relation(fields: [personIDs], references: [id])
}

model Complement {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  Addresses Address[]
}

model LocalDistric {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  number Int

  ElectoralSections ElectoralSection[]
}

model FederalDistric {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  number Int

  ElectoralSections ElectoralSection[]
}

model ElectoralSection {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  number           Int
  localDistricId   String @db.ObjectId
  federalDistricId String @db.ObjectId

  LocalDistric   LocalDistric   @relation(fields: [localDistricId], references: [id])
  FederalDistric FederalDistric @relation(fields: [federalDistricId], references: [id])
  Addresses      Address[]
  VisorNeeds     Visor_Need[]
}

model Municipio {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  visorAuxiliariesIDs String[] @db.ObjectId

  VisorAuxiliaries Visor_Auxiliaries[] @relation(fields: [visorAuxiliariesIDs], references: [id])

  Colonias Colonia[]
}

model Delegation {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  Colonias Colonia[]
}

model Colonia {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  postalCode   Int
  municipioId  String  @db.ObjectId
  delegationId String? @db.ObjectId

  Streets    Street[]
  Municipio  Municipio   @relation(fields: [municipioId], references: [id])
  Delegation Delegation? @relation(fields: [delegationId], references: [id])
}

model Street {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  coloniaId String @db.ObjectId

  Colonia   Colonia   @relation(fields: [coloniaId], references: [id])
  Addresses Address[]
}

model Address {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  outdoorNum         String?
  interiorNum        String?
  complementId       String  @db.ObjectId
  defComplement      String
  streetId           String? @db.ObjectId
  electoralSectionId String  @db.ObjectId
  isEstablished      Boolean
  foreignAddress     String?
  personId           String? @unique @db.ObjectId

  PendingAddress   PendingAddress?
  Complement       Complement       @relation(fields: [complementId], references: [id], onDelete: Cascade)
  Street           Street?          @relation(fields: [streetId], references: [id], onDelete: Cascade)
  ElectoralSection ElectoralSection @relation(fields: [electoralSectionId], references: [id], onDelete: Cascade)
  Person           Person?          @relation(fields: [personId], references: [id], onDelete: Cascade)
}

model PendingAddress {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  street    String
  colonia   String
  delgation String?
  municipio String
  status    StatusPendingAddress @default(NOT_VERIFIED)
  addressId String               @unique @db.ObjectId

  Address Address? @relation(fields: [addressId], references: [id], onDelete: Cascade)
}

model Person {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  fatherLastName  String
  motherLastName  String?
  phone           Phone?
  email           String?
  curp            String?
  rfc             String?
  birthPlace      String?
  voterKey        String?
  gender          Int? // 0=MUJER 1=HOMBRE 3=OTRO
  scholarship     String?
  profession      String?
  tagIDs          String[] @db.ObjectId
  ineURL          String?
  proofAddressURL String?
  photoURL        String?

  Tags    Tag[]    @relation(fields: [tagIDs], references: [id])
  Address Address?
  User    User?
}

model User {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime    @default(now())
  active       Boolean     @default(true)
  username     String      @unique
  password     String
  isSuperAdmin Boolean     @default(false)
  roles        RoleFront[] // [{module: "visor", role: "Admin"}, {module: "whats", role: "User"}]
  personId     String      @unique @db.ObjectId

  Person     Person       @relation(fields: [personId], references: [id], onDelete: Cascade)
  // TOKEN: Person.name, username, roles: {visor: "Admin", whats: "User"}
  VisorUsers Visor_User[]
}

type RoleFront {
  module String
  role   String?
}

// VISOR MODELS
model Visor_User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  active    Boolean  @default(true)
  userId    String   @db.ObjectId
  title     String?
  rol       VisRoles

  User            User                   @relation(fields: [userId], references: [id])
  Coordinators    Visor_Structure[]      @relation("CoordinatorRelation")
  Technicals      Visor_Structure[]      @relation("TechnicalRelation")
  Attachs         Visor_Structure[]      @relation("AttachRelation")
  Auditors        Visor_Structure[]      @relation("AuditorRelation")
  SubCoordinators Visor_SubCoordinator[] @relation("SubCoordinatorRelation")
  SubTechnicals   Visor_SubCoordinator[] @relation("SubTechnicalRelation")
  Auxiliaries     Visor_Auxiliaries[]    @relation("AuxiliaryRelation")
  AuxTechnicals   Visor_Auxiliaries[]    @relation("AuxTechnicalRelation")
  Links           Visor_Team[]
  Caminantes      Visor_Caminantes[]
  RoundCreators   Visor_Round[]
  NeedCreators    Visor_Need[]
}

model Visor_PointTypes {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  structureId       String   @db.ObjectId
  subCoordinatorIDs String[] @db.ObjectId
  teamIDs           String[] @db.ObjectId
  roundIds          String[] @db.ObjectId

  Structure       Visor_Structure        @relation(fields: [structureId], references: [id])
  SubCoordinators Visor_SubCoordinator[] @relation(fields: [subCoordinatorIDs], references: [id])
  Teams           Visor_Team[]           @relation(fields: [teamIDs], references: [id])
  VisorRound      Visor_Round[]          @relation(fields: [roundIds], references: [id])
}

model Visor_Structure {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  structureType VisStructureTypes
  coordinatorId String            @db.ObjectId
  technicalId   String            @db.ObjectId
  attachId      String            @db.ObjectId
  auditorId     String            @db.ObjectId

  Coordinator Visor_User @relation("CoordinatorRelation", fields: [coordinatorId], references: [id])
  Technical   Visor_User @relation("TechnicalRelation", fields: [technicalId], references: [id])
  Attach      Visor_User @relation("AttachRelation", fields: [attachId], references: [id])
  Auditor     Visor_User @relation("AuditorRelation", fields: [auditorId], references: [id])

  VisorSubCoordinators Visor_SubCoordinator[]
  VisorPointTypes      Visor_PointTypes[]
}

model Visor_SubCoordinator {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  active        Boolean  @default(true)
  category      String
  userId        String   @db.ObjectId
  technicalId   String   @db.ObjectId
  pointTypesIDs String[] @db.ObjectId
  structureId   String   @db.ObjectId

  User       Visor_User         @relation("SubCoordinatorRelation", fields: [userId], references: [id])
  Technical  Visor_User         @relation("SubTechnicalRelation", fields: [technicalId], references: [id])
  PointTypes Visor_PointTypes[] @relation(fields: [pointTypesIDs], references: [id])
  Structure  Visor_Structure    @relation(fields: [structureId], references: [id])

  Auxiliaries Visor_Auxiliaries[]
}

model Visor_Auxiliaries {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  active         Boolean  @default(true)
  userId         String   @db.ObjectId
  technicalId    String   @db.ObjectId
  subCoordinator String   @db.ObjectId
  municipiosIDs  String[] @db.ObjectId

  User           Visor_User           @relation("AuxiliaryRelation", fields: [userId], references: [id])
  Technical      Visor_User           @relation("AuxTechnicalRelation", fields: [technicalId], references: [id])
  SubCoordinator Visor_SubCoordinator @relation(fields: [subCoordinator], references: [id])
  Municipios     Municipio[]          @relation(fields: [municipiosIDs], references: [id])

  Teams Visor_Team[]
}

model Visor_Team {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime   @default(now())
  name           String
  active         Boolean    @default(true)
  geographicConf VisGeoConf
  linkId         String     @db.ObjectId
  auxiliaryId    String     @db.ObjectId
  pointTypesIDs  String[]   @db.ObjectId

  Link       Visor_User         @relation(fields: [linkId], references: [id])
  Auxiliary  Visor_Auxiliaries  @relation(fields: [auxiliaryId], references: [id])
  PointTypes Visor_PointTypes[] @relation(fields: [pointTypesIDs], references: [id])

  Caminantes Visor_Caminantes[]
  Rounds     Visor_Round[]
  Batchs     Visor_Batch[]
  Needs      Visor_Need[]
}

model Visor_Caminantes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  active    Boolean  @default(true)
  teamId    String   @db.ObjectId

  User Visor_User @relation(fields: [userId], references: [id])
  Team Visor_Team @relation(fields: [teamId], references: [id])
}

model Visor_Round {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime       @default(now())
  name        String
  startedAt   DateTime
  status      VisRoundStatus @default(NotStarted)
  pointTypes  String[]       @db.ObjectId
  createdById String         @db.ObjectId
  teamId      String         @db.ObjectId

  CreatedBy  Visor_User         @relation(fields: [createdById], references: [id])
  Team       Visor_Team         @relation(fields: [teamId], references: [id])
  PointTypes Visor_PointTypes[] @relation(fields: [pointTypes], references: [id])

  CheckPoints Visor_CheckPoint[]
}

model Visor_CheckPoint {
  id        String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime             @default(now())
  latitude  Float
  longitude Float
  visitedBy VisCheckPointVisit[]
  roundId   String               @db.ObjectId

  Round Visor_Round @relation(fields: [roundId], references: [id])
}

model Visor_Survey {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime        @default(now())
  latitude  Float
  longitude Float
  status    VisSurveyStatus
  answers   Json
  metadata  Json
  batchId   String          @db.ObjectId

  Batch Visor_Batch @relation(fields: [batchId], references: [id])
}

model Visor_Form {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  name      String
  schema    VisSchema[]

  VisorBatch Visor_Batch[]
}

model Visor_Batch {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime       @default(now())
  name      String
  status    VisBatchStatus
  teamId    String         @db.ObjectId
  formId    String         @unique @db.ObjectId
  csvFile   String

  Team Visor_Team @relation(fields: [teamId], references: [id])
  Form Visor_Form @relation(fields: [formId], references: [id])

  Surveys Visor_Survey[]
}

model Visor_Need {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime @default(now())
  active             Boolean
  acceptedDate       DateTime
  latutude           Float
  longitude          Float
  electoralSectionId String   @db.ObjectId
  typeNeed           String
  detailNeed         String
  status             String
  observations       String
  urlImage           String
  createdBy          String   @db.ObjectId
  teamId             String   @db.ObjectId

  Section   ElectoralSection @relation(fields: [electoralSectionId], references: [id])
  CreatedBy Visor_User       @relation(fields: [createdBy], references: [id])
  Team      Visor_Team       @relation(fields: [teamId], references: [id])
}

// TYPES AND ENUMS
type UserRoles {
  visor VisorRoles?
  whats WhatsRoles?
}

enum VisorRoles {
  Admin
  User
  Viewer
}

enum WhatsRoles {
  Admin
  User
  Sender
}

type Phone {
  number   String
  isActive Boolean @default(true)
}

enum StatusPendingAddress {
  APPROVED
  IN_REVIEW
  NOT_VERIFIED
  REJECTED
}

enum VisRoles {
  Admin
  Coordinator
  Technical
  User
}

enum VisStructureTypes {
  Politico
  Territorial
  Gobierno
}

type VisGeoConf {
  geographicLevel VisGeoLevel
  values          String[]
}

enum VisGeoLevel {
  Municipios
  Delegaciones
  DistritosLocales
  Secciones
  Colonias
}

enum VisRoundStatus {
  Active
  NotStarted
  Finished
  Paused
}

enum VisBatchStatus {
  Active
  NotStarted
  Finished
  Paused
}

type VisSchema {
  id           String
  title        String
  type         VisQuestionsType
  isRequired   Boolean
  options      VisFormOptions[]
  prevOptionId String?
}

enum VisQuestionsType {
  String
  Number
  Multiple
}

type VisFormOptions {
  id         String
  title      String
  questionId String?
}

enum VisSurveyStatus {
  NOT_ANSWERED
  DO_NOT_COME_BACK
  COME_BACK_AGAIN
  ANSWERED
}

type VisCheckPointVisit {
  userId String
  date   DateTime
}
